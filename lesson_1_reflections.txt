How did viewing a diff between two versions of a file help you see the bug that was introduced?
Automatically pinpointing all differences allows you to skip the tedious step and go straight to analysis.

Why reflect?
We do not learn from experience, we learn from reflecting on experience.
Have an experience (practice) -> observe/reflect on the experience (metacognition) -> learn from the experience by forming abstract concepts (metacognition) -> test implications of concepts in new situations (back to practice)

How could having easy access to the entire history of a file name make you a more efficient programmer in the long term?
Tasks that challenge learners to integrate new learning into previous learning, demand the ordering of thoughts, and require evaluation are defining qualities that encourage reflection and therefore learning.
It allows you to learn from others' mistakes and build off of their progress and learning.

When to commit:
One commit per logical change; each commit should have one clear, logical purpose

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
More user control; allows users to make their own judgement calls and create meaningfull commits.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Because many Git projects involve a repository of files that rely on each other or contribute to the total project, while Google Docs involve a single document.

How can you use the commands git log and git diff to view the history of files?
git log allows you to see all commits with a meaningful description that makes it easy to find different versions of files.  If there is ever need for further inspection, you can use git diff to see the exact changes made

How might using version control make you more confident to make changes that could break something?
It removes any risk of mistake and tracks/logs changes so you don't have to.
Version control introduces this idea of exploration.  Without version control, programming is a tedious process of small baby steps, whereas with version control, you can explore a large space of deep concepts and possibilities without worrying about breaking your project.

Now that you have your workspace set up, what do you want to try using Git for?
To take bigger risks and add features that may make significant changes/additions to projects.

